"""contains all helper functions used for deap RNN evolution code - all functions
that are not evaluation or part of the evolutionary code
"""

import numpy as np
import torch


def list_to_matrices(weight_list, num_in, num_hid, num_out):
	"""takes a list of weight generated by deap and converts
	it into numpy arrays that can then be entered into PyTorch
	as the parameters for an RNN to judge its fitness

	Assumes each RNN always has two weight matrices
	"""
	
	# define size of first weight matrix
	# size of second weight matrix follows from this
	w1_size = (num_in + num_hid)*num_hid

	# separate each of the weight into separate numpy arrays
	# resized after - returned now as 1D arrays
	w1 = np.array(weight_list[: w1_size], copy=True)
	w2 = np.array(weight_list[w1_size:], copy=True)

	return (w1, w2)

def inject_weights(rnn, w1, w2):
	"""method that takes a pytorch rnn and sets the
	weights of its two linear units equal to w1 and 
	w2 so that their fitness can be tested with the RNN
	"""
	
	# find needed shapes of weight matrices
	w1_shape = rnn.in2hid.weight.data.numpy().shape
	w2_shape = rnn.hid2out.weight.data.numpy().shape
	
	# reshape matrices to the proper shape
	w1 = np.reshape(w1, w1_shape)
	w2 = np.reshape(w2, w2_shape)
	
	# set weights within the rnn equal to w1 and w2
	rnn.in2hid.weight.data = torch.from_numpy(w1)
	rnn.hid2out.weight.data = torch.from_numpy(w2)

	# return the rnn with newly set weights
	return rnn
