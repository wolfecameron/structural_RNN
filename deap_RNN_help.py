"""contains all helper functions used for deap RNN evolution code - all functions
that are not evaluation or part of the evolutionary code
"""

import numpy as np
import torch

from gear import Gear

def list_to_matrices(weight_list, num_in, num_hid, num_out):
	"""takes a list of weight generated by deap and converts
	it into numpy arrays that can then be entered into PyTorch
	as the parameters for an RNN to judge its fitness

	Assumes each RNN always has two weight matrices
	"""
	
	# define size of first weight matrix
	# size of second weight matrix follows from this
	w1_size = (num_in + num_hid)*num_hid
	w1_bias_size = num_hid
	w2_size = (num_hid*num_out)
	w2_bias_size = num_out
	
	# separate each of the weight into separate numpy arrays
	# resized after - returned now as 1D arrays
	w1 = np.array(weight_list[: w1_size], copy=True)
	w1_bias = np.array(weight_list[w1_size: (w1_size + w1_bias_size)], copy=True)
	w2 = np.array(weight_list[(w1_size + w1_bias_size): (w1_size + w1_bias_size + w2_size)],
			copy=True)
	w2_bias = np.array(weight_list[(w1_size + w1_bias_size + w2_size): ], copy=True)
	
	return (w1, w1_bias, w2, w2_bias)

def inject_weights(rnn, w1, w1_bias, w2, w2_bias):
	"""method that takes a pytorch rnn and sets the
	weights of its two linear units equal to w1 and 
	w2 so that their fitness can be tested with the RNN
	"""
	
	# find needed shapes of weight matrices
	w1_shape = rnn.in2hid.weight.data.numpy().shape
	w1_bias_shape = rnn.in2hid.bias.data.numpy().shape
	w2_shape = rnn.hid2out.weight.data.numpy().shape
	w2_bias_shape = rnn.hid2out.bias.data.numpy().shape	

	# reshape matrices to the proper shape
	w1 = np.reshape(w1, w1_shape)
	w1_bias = np.reshape(w1_bias, w1_bias_shape)
	w2 = np.reshape(w2, w2_shape)
	w2_bias = np.reshape(w2_bias, w2_bias_shape)
	
	# convert numpy arrays to tensors
	w1 = torch.from_numpy(w1).float()
	w1_bias = torch.from_numpy(w1_bias).float()
	w2 = torch.from_numpy(w2).float()
	w2_bias = torch.from_numpy(w2_bias).float()
	
	# set weights within the rnn equal to w1 and w2
	# types of weights must be float to avoid error with double
	rnn.in2hid.weight.data = w1
	rnn.in2hid.bias.data = w1_bias
	rnn.hid2out.weight.data = w2
	rnn.hid2out.bias.data = w2_bias
	
	# set all tensors in the state array equal to new weights
	rnn.state_dict()['in2hid.weight'].copy_(w1)
	rnn.state_dict()['in2hid.bias'].copy_(w1_bias)
	rnn.state_dict()['hid2out.weight'].copy_(w2)
	rnn.state_dict()['hid2out.bias'].copy_(w2_bias)

	# return the rnn with newly set weights
	return rnn

def get_rnn_output(rnn, max_it, act_exp, verbose=False):
	"""takes rnn with current weights and gets all outputs
	for the associated output circle
		

	Parameters:
	rnn -- the rnn being used
	max_it -- the maximum number of discrete points in the helical shape
	sigmoid_exp -- constant to multiply numbers passed into output activation
`	"""
	
	# initialize all tracking values that are needed
	# to create a structure with the rnn
	theta_scale = 20.0
	radius_scale = 4.0
	hidden = torch.zeros(1, rnn.hidden_size)
	all_positions = []
	r = 0.0
	theta = 0.0
	dr = 0.0
	dt = 0.0
	curr_t = 0 # track current t so that it does not exceed max

	# run rnn until candidate structure reaches the origin
	while (curr_t < max_it):
		# add current position into structure history
		rnn_pos = (r, theta)
		all_positions.append(rnn_pos)

		# get input and activate rnn at current timestep
		# be sure to normalize inputs before they are passed into RNN
		rnn_input = [[dr, dt]]
		outs, hidden = rnn.forward(torch.Tensor(rnn_input), hidden, act_exp)
		dr, dt = outs.data[0][0].item(), outs.data[0][1].item()
		
		# thickness should be scaled to minimum thickness and avoid negative thickness
		# tanh has a minimum value of -1, so add this to thickness and the minimum value
		# must also scale range of tanh to output values from min to max thickness
		#thick += (1.0 + MIN_THICKNESS)*((MAX_THICKNESS - MIN_THICKNESS)/2.0)	
	
		# print information
		if verbose:
			print("Current R: {0}".format(str(r)))
			print("dR: {0}".format(str(dr)))
			print("dT: {0}".format(str(dt)))
			#print("Thick: {0}".format(str(thick)))

		# update the current position of the structure
		# outputs are scaled to make changes not as large
		r += dr#(dr/radius_scale)
		theta += dt#abs(dt)/theta_scale

		# increment the current time step
		curr_t += 1

	all_positions.append((r, theta))

	return all_positions

def get_RNN_output_cartesian(rnn, max_y, max_x, max_t, act_exp, verbose=False):
	"""gets RNN output for the gear tooth evolution - output starts at (0,0)
	in cartesian coordinates and moves upwards until it reaches a maximum value
	of y, forming a unique path from bottom to top that will be used as the shape
	of the gear tooth"""

	# intialize all values that need to be tracked by rnn
	x = 0.0
	y = 0.0
	dx = 0.0
	dy = 0.0
	x_scale = 5.0
	y_scale = 5.0
	curr_t = 0

	# initialize hidden state
	hidden = torch.zeros(1, rnn.hidden_size)

	# track all positions of RNN
	all_positions = []
	
	# run RNN until output reaches desired y position
	while(y < max_y and curr_t < max_t):
		# add current position into the positions list
		rnn_pos = (x, y)
		all_positions.append(rnn_pos)

		# form input and activte the rnn
		rnn_input = [[dx, dy]]
		outs, hidden = rnn.forward(torch.Tensor(rnn_input), hidden, act_exp)
		dx, dy = outs.data[0][0].item(), outs.data[0][1].item()

		# print out the dx and dy if it is verbose
		if(verbose):
			print("X: {0}".format(str(x)))
			print("Y: {0}".format(str(y)))
			print("dx: {0}".format(str(dx)))
			print("dy: {0}".format(str(dy)))
			input()

		# update x and y pos with rnn output
		x += (dx/x_scale)
		# x must be kept from going much too far from center
		if(x < -max_x):
			x = -max_x
		elif(x > max_x):
			x = max_x
		y += abs(dy/y_scale) # y must always move upward ? or is it ok?
		curr_t += 1
	
	# append the last position of the RNN
	all_positions.append((x, y))
	return all_positions

def get_gear_mechanism(rnn, max_gears, min_gears, stop_thresh, rad_scale, act_exp, pos_thresh):
	"""method for getting output of RNN representing an entire mechanism of gears
	rnn outputs at each t a value deciding if next gear will be to left, to right,
	or attached to back, and another value dictating the pitch radius of the gear -
	also outputs a value that decides if rnn should stop at this gear"""	


	# initialize all variables needed to get output
	radius = 0
	gear_pos_a = 0 # angle gear is placed at
	gear_pos_i = 0 # index of gear to attach to
	stop = 0

	# initialize the hidden layer
	hidden = torch.zeros(1, rnn.hidden_size)	
	
	# length of the outputs is the number of gears that have been added to system
	all_outputs = []

	while((len(all_outputs) < min_gears) or (len(all_outputs) < max_gears and stop < stop_thresh)):
		# must run inputs through RNN first to get values for first gear
		rnn_input = [[radius, gear_pos_a, gear_pos_i, stop]]
		outs, hidden = rnn.forward(torch.Tensor(rnn_input), hidden, act_exp)
		radius, gear_pos_a, gear_pos_i, stop = outs.data[0][0].item(), outs.data[0][1].item() \
												, outs.data[0][2].item(), outs.data[0][3].item()

		# make sure radius is positive and scale it to fit between 0 and maximum possible value
		# do not input scaled value back into RNN - large values can bias the input
		radius_scaled = (radius + 1.5)*rad_scale	
		
		# convert pos_i into an index
		# location of first gear is arbitrary - just set to 0
		pos_index = 0
		curr_len = len(all_outputs)
		if(curr_len != 0):
			# output of pos_i should be scaled to the length of the current list to get index
			pos_index = int(((gear_pos_i + 1.0)/2.0)*curr_len) # cast to int so it is an index
		
		# append outputs into list
		all_outputs.append((radius_scaled, gear_pos_a, pos_index, stop))
	
	return all_outputs

def get_gear_ratio(outputs, pos_thresh):
	"""method for finding the gear ratio of a set of gears that is generated
	by the rnn - assumes that the first gear in the list is the input and
	the last gear in the list is the output"""

	# set radius to the intial value
	radius = outputs[0][0]
	ratio = 1.0	

	# go through each gear and update the ratio by multiplying with current ratio
	for gear_ind in range(1, len(outputs)):
		gear = outputs[gear_ind]
		nxt_radius = gear[0]
		direction = gear[1]
		if(direction < pos_thresh[0] or direction > pos_thresh[1]):
			ratio *= radius/nxt_radius
		# if gear is attached to back only need to update radius
		radius = nxt_radius

	return ratio

def get_centers_and_radii(outputs, pos_thresh, output_min):
	"""takes a list of outputs of form (radius, position output, stop) and
	transforms it into a list of center locations and radii - any values below
	pos_thresh for position output are scaled between 0 and 360 degrees for placement
	relative to the last gear in the list, anything greater or equal represents gear
	being attached to back of previous gear
	
	each element of result has form (position, radius, z_position)
	"""

	# find how much positions should be scaled to get to 2*pi
	total_range = pos_thresh - output_min # range is from -1 to pos thresh for tanh
	scale_factor = 2*np.pi/total_range

	# third element of position tuple is a z dimension that tells you if gear is attached to back of another
	z = 0	
	
	# instantiate resulting list - first circle always at origin
	result = [((0, 0), outputs[0][0], z)]

	# go through each gear and find position relative to previous gear
	for curr, last in zip(outputs[1:], outputs):
		# if position greater than pos_thresh, gear is attached to back of previous
		if(curr[1] > pos_thresh):
			# increment z because gears are now placed behind the others
			z += 1
			result.append((result[-1][0], curr[0], z))
		
		else:
			angle = (curr[1] - output_min)*scale_factor
			distance = curr[0] + last[0]
			last_pos = result[-1][0]
			
			# must handle each quadrant specifically depending on angle
			if(angle <= np.pi/2.0):
				x_change = distance*np.cos(angle)
				y_change = distance*np.sin(angle)
			elif(angle <= np.pi):
				angle = np.pi - angle
				x_change = -distance*np.cos(angle)
				y_change = distance*np.sin(angle)
			elif(angle <= 1.5*np.pi):
				angle = angle - np.pi
				x_change = -distance*np.cos(angle)
				y_change = -distance*np.sin(angle)
			else:
				angle = 2*np.pi - angle
				x_change = distance*np.cos(angle)
				y_change = -distance*np.sin(angle)
			
			# update the position with change in x and y relative to last pos
			pos = (last_pos[0] + x_change, last_pos[1] + y_change)			
			result.append((pos, curr[0], z))
	
	return result

def check_intersect(mechanism):
	"""takes a list of circles (defined as a tuple with center position and the radii)
	and returns true if any circles intersect and false if not circles intersect"""

	# perform nested loop and check if each pair of circles intersects
	for i in enumerate(mechanism):
		left_c = i[1]
		right_ind = i[0] + 1
		while(right_ind < len(mechanism)):
			# grab current circle to test for intersection
			right_c = mechanism[right_ind]
			
			# find distance between centers and sum of radii
			center_dist = np.sqrt(np.square(right_c.pos[0] - left_c.pos[0]) \
				+ np.square(right_c.pos[1] - left_c.pos[1]))
			radii_sum = right_c.radius + left_c.radius
			
			# if sum of radii is greater than the distance between centers
			# then these two circles intersect if at same z position
			if(radii_sum > center_dist and left_c.pos[2] == right_c.pos[2]):
				return True
			right_ind += 1

	# only reaches this point if no circles intersect
	return False
	
def create_mechanism_representation(all_outputs, pos_thresh, output_min):
	"""uses a list of gear RNN outputs to create a more understandable representation for
	the mechanism, each gear is represented with (radius, position, previous gear, next gears,
	ratio) so that all information for each gear in the mechanism is readily available
	
	this method converts the raw RNN output into the above form - stored as a Gear object
	
	radius pos prev gear
	radius angle index stop
	"""
	
	# populate mechanism with the first gear
	# ratio set to 1.0 by default when gear is instantiated
	mechanism = [Gear(all_outputs[0][0], (0,0,0), 0)]
	
	# go through all outputs and create a gear object for each one
	for ind, curr in enumerate(all_outputs[1:]):
		prev_gear = mechanism[curr[2]]
		new_pos = get_gear_pos(prev_gear.pos, curr[1], prev_gear.radius, curr[0], pos_thresh, output_min)
		mechanism.append(Gear(curr[0], new_pos, curr[2]))
		
		# add index of current into list of nxt gears for gear it attaches to
		prev_gear.next_gears.append(ind + 1)
		
		# find ratio of current gear - only changes if not attached to front/back
		new_ratio = prev_gear.ratio*(prev_gear.radius/mechanism[-1].radius)
		if(-pos_thresh <= curr[1] <= pos_thresh ):
			mechanism[-1].ratio = new_ratio
		else:
			mechanism[-1].ratio = prev_gear.ratio
	
	return mechanism	

def get_gear_pos(previous_pos, angle, prev_rad, curr_rad, pos_thresh, output_min):
	"""this method outputs the position of a single gear based on the position
	of the gear it attaches to and it's angular RNN output
	"""
	
	# find how much positions should be scaled to get to 2*pi
	total_range = -2.0*(1.0 - pos_thresh) - 2.0*output_min # range is from -pos_thresh to pos thresh for tanh
	scale_factor = 2.0*np.pi/total_range
	
	# attack to the back of the previous gear
	if(angle > pos_thresh):
		# just increment z dimension
		pos = (previous_pos[0], previous_pos[1], previous_pos[2] + 1)
	# attach to front of previous gear
	elif(angle < -pos_thresh):
		# just decrement z dimension
		pos = (previous_pos[0], previous_pos[1], previous_pos[2] - 1)	
	
	else:
		angle = (angle + pos_thresh)*scale_factor
		distance = curr_rad + prev_rad
			
		# must handle each quadrant specifically depending on angle
		if(angle <= np.pi/2.0):
			x_change = distance*np.cos(angle)
			y_change = distance*np.sin(angle)
		elif(angle <= np.pi):
			angle = np.pi - angle
			x_change = -distance*np.cos(angle)
			y_change = distance*np.sin(angle)
		elif(angle <= 1.5*np.pi):
			angle = angle - np.pi
			x_change = -distance*np.cos(angle)
			y_change = -distance*np.sin(angle)
		else:
			angle = 2*np.pi - angle
			x_change = distance*np.cos(angle)
			y_change = -distance*np.sin(angle)
		
		# update the position with change in x and y relative to last pos
		pos = (previous_pos[0] + x_change, previous_pos[1] + y_change, previous_pos[2])

	return pos			


if __name__ == '__main__':
	""" main function for quick tests"""

	get_gear_pos(None, None, .75, -1)
